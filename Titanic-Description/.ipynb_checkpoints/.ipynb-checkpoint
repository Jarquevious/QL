{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv('titanic.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29.69911764705882"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Age.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x115942a90>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Age.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      int64\n",
       "Survived         int64\n",
       "Pclass           int64\n",
       "Name            object\n",
       "Sex             object\n",
       "Age            float64\n",
       "SibSp            int64\n",
       "Parch            int64\n",
       "Ticket          object\n",
       "Fare           float64\n",
       "Cabin           object\n",
       "Embarked        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Age.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    24.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Age.mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1183a0b50>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(column=\"Age\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1185fa9d0>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(column=\"Fare\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 1.489795918367347\n",
      "Mean: 7.285714285714286\n",
      "Min: 4\n",
      "Max: 9\n",
      "Range: 5\n"
     ]
    }
   ],
   "source": [
    "variance_1 = [7,8,7,8,9,6,7,7,7,8,9,8,7,4]\n",
    "\n",
    "print(\"Variance:\", np.var(variance_1))\n",
    "print(\"Mean:\", np.mean(variance_1))\n",
    "print(\"Min:\", np.min(variance_1))\n",
    "print(\"Max:\", np.max(variance_1))\n",
    "print(\"Range:\", np.max(variance_1) - np.min(variance_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 458729763.47107434\n",
      "Mean: 242.27272727272728\n",
      "Min: -50349\n",
      "Max: 50023\n",
      "Range: 100372\n"
     ]
    }
   ],
   "source": [
    "variance_2 = [102,2,50023,30,3040,50,20,1,50,-304,-50349]\n",
    "\n",
    "print(\"Variance:\",np.var(variance_2))\n",
    "print(\"Mean:\", np.mean(variance_2))\n",
    "print(\"Min:\", np.min(variance_2))\n",
    "print(\"Max:\", np.max(variance_2))\n",
    "print(\"Range:\", np.max(variance_2) - np.min(variance_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standard Deviation: 1.2205719636167902\n",
      "Standard Deviation: 21417.97757658445\n"
     ]
    }
   ],
   "source": [
    "def standard_deviation(values):\n",
    "  # Compute the mean of the series\n",
    "    length = len(values)\n",
    "\n",
    "  # Find the squares of all the deviations from the mean\n",
    "    m = df.values.mean()\n",
    "    total_sum = 0\n",
    "    for i in range(length):\n",
    "        \n",
    "  # Sum the squares of the deviations from the mean\n",
    "        total_sum += (values(i)-m)**2\n",
    "\n",
    "  # Divide this sum by the total number of data values\n",
    "    under_root = total_sum*1/length\n",
    "  # Take the squareroot of this quotient.\n",
    "\n",
    "    return math.sqrt(under_root)\n",
    "\n",
    "# print(\"Standard Deviation:\", standard_deviation(variance_1))\n",
    "print(\"Standard Deviation:\", np.std(variance_1))\n",
    "\n",
    "# print(\"Standard Deviation:\", standard_deviation(variance_2))\n",
    "print(\"Standard Deviation:\", np.std(variance_2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    66231.000000\n",
       "Survived           0.236772\n",
       "Pclass             0.699015\n",
       "Age              211.019125\n",
       "SibSp              1.216043\n",
       "Parch              0.649728\n",
       "Fare            2469.436846\n",
       "dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('titanic.csv')\n",
    "df.var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x118482bd0>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist('Age')\n",
    "df.hist('Fare')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Age (in Years)')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "import matplotlib\n",
    "\n",
    "\n",
    "\n",
    "# Age Histogram\n",
    "plt.hist(df.Age)\n",
    "plt.axvline(df.Age.mean(), color='k', linestyle='dashed', linewidth=1)\n",
    "plt.title('Ages of Passengers on Titanic')\n",
    "plt.ylabel('Count')\n",
    "plt.xlabel('Age (in Years)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Fare (in Dollars)')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fare Histogram\n",
    "\n",
    "plt.hist(df.Fare)\n",
    "plt.axvline(df.Fare.mean(), color='k', linestyle='dashed', linewidth=1)\n",
    "plt.title('Fares of Passengers on Titanic')\n",
    "plt.ylabel('Count')\n",
    "plt.xlabel('Fare (in Dollars)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x118afea10>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Age\n",
    "plt.axvline(df.Age.mean()+df.Age.std(), color='k', linestyle='dashed', linewidth=1)\n",
    "plt.axvline(df.Age.mean()-df.Age.std(), color='k', linestyle='dashed', linewidth=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x118c2a750>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fare\n",
    "plt.axvline(df.Fare.mean()+df.Fare.std(), color='k', linestyle='dashed', linewidth=1)\n",
    "plt.axvline(df.Fare.mean()-df.Fare.std(), color='k', linestyle='dashed', linewidth=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
